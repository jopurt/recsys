import pandas as pd
import numpy as np
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.metrics.pairwise import cosine_similarity
import scipy.sparse as sp

pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)

df = pd.read_csv("T_games_dataset.csv")

columns_to_drop = ['id', 'order_day']

df = df.drop(columns=columns_to_drop)

good_id_to_index = {good_id: idx for idx, good_id in enumerate(df['good_id'].unique())}
index_to_good_id = {idx: good_id for good_id, idx in good_id_to_index.items()}

encoder_items = OneHotEncoder()
category_features = encoder_items.fit_transform(df[['category_id']])

scaler_items = StandardScaler()
numeric_features = scaler_items.fit_transform(df[['good_price', 'steam_popularity_score', 'monthly_income_amt']])

item_features = sp.hstack([category_features, numeric_features])
item_features_dense = item_features.toarray()


user_profiles = {}

for i, client_id in enumerate(df['client_id'].unique()):
    if i % 100 == 0:
        print(f"{i + 1}/{len(df['client_id'].unique())} (ID: {client_id})")

    user_data = df[df['client_id'] == client_id]
    user_profile = np.zeros(item_features_dense.shape[1])

    for _, row in user_data.iterrows():
        good_id = row['good_id']
        good_index = good_id_to_index[good_id]
        good_features = item_features_dense[good_index]

        if user_profile.shape != good_features.shape:
            raise ValueError(f"Размерности не совпадают: user_profile {user_profile.shape}, good_features {good_features.shape}")

        user_profile += good_features * row['good_cnt']

    user_profiles[client_id] = user_profile / (len(user_data) + 1)

def recommend_items(user_id, top_n=5):
    if user_id not in user_profiles:
        return "Пользователь не найден."

    user_profile = user_profiles[user_id]
    similarities = cosine_similarity(user_profile.reshape(1, -1), item_features_dense).flatten()
    top_indices = np.argsort(similarities)[-top_n:][::-1]

    valid_good_ids = []
    for idx in top_indices:
        if idx in index_to_good_id:
            valid_good_ids.append(index_to_good_id[idx])
        else:
            print(f"индекс {idx} отсутствует в словаре index_to_good_id.")

    valid_good_ids = [good_id for good_id in valid_good_ids if good_id in df['good_id'].values]
    if len(valid_good_ids) < len(top_indices):
        print(f"{len(top_indices) - len(valid_good_ids)} рекомендованных товаров не найдены в датасете.")

    recommended_items = df[df['good_id'].isin(valid_good_ids)][['good_id', 'good_name', 'category_name']]
    return recommended_items


user_id = df['client_id'].iloc[0]
recommendations = recommend_items(user_id, top_n=5)
print(recommendations)


def calculate_metrics(df, user_profiles, item_features_dense, good_id_to_index, top_n=5):
    precision_scores = []
    recall_scores = []

    for i, client_id in enumerate(df['client_id'].unique()):
        if i % 100 == 0:
            print(f"Оценка для пользователя {i + 1}/{len(df['client_id'].unique())} (ID: {client_id})")

        user_data = df[df['client_id'] == client_id]
        purchased_items = set(user_data['good_id'])

        if client_id not in user_profiles:
            continue
        user_profile = user_profiles[client_id]
        similarities = cosine_similarity(user_profile.reshape(1, -1), item_features_dense).flatten()
        top_indices = np.argsort(similarities)[-top_n:][::-1]

        valid_good_ids = []
        for idx in top_indices:
            if idx in index_to_good_id:
                valid_good_ids.append(index_to_good_id[idx])
            else:
                continue

        valid_good_ids = [good_id for good_id in valid_good_ids if good_id in df['good_id'].values]
        recommended_items = set(valid_good_ids)

        relevant_items = purchased_items.intersection(recommended_items)
        precision = len(relevant_items) / top_n if top_n > 0 else 0
        recall = len(relevant_items) / len(purchased_items) if len(purchased_items) > 0 else 0

        precision_scores.append(precision)
        recall_scores.append(recall)

    mean_precision = np.mean(precision_scores)
    mean_recall = np.mean(recall_scores)

    return mean_precision, mean_recall

mean_precision, mean_recall = calculate_metrics(df, user_profiles, item_features_dense, good_id_to_index, top_n=5)
print(f"Mean Precision@5: {mean_precision:.4f}")
print(f"Mean Recall@5: {mean_recall:.4f}")
